// Copyright 2023 The Elastic AI Search Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax="proto2";
package EA.proto.db;
option cc_generic_services = true;
//option cc_enable_arenas = true;
import "eaproto/common/error_code.proto";
import "eaproto/common/primitive.proto";

enum SchemaType {
    DYNAMIC = 1;
    STATIC = 2;
};

enum Charset {
    UTF8 = 0;
    GBK = 1;
    CS_UNKNOWN = 2;
};

enum BackupTable {
    BT_NONE    = 0;
    BT_AUTO    = 1;
    BT_READ    = 2;
    BT_WRITE   = 3;
    BT_LEARNER = 4;
};

enum StreamState {
    SS_INIT = 0;
    SS_PROCESSING = 1;
    SS_SUCCESS = 2;
    SS_FAIL = 3;
};

message SchemaConf {
    optional bool need_merge                = 1;
    optional bool storage_compute_separate  = 2; 
    optional bool select_index_by_cost      = 3;
    optional int64 op_version               = 4;
    optional string op_desc                 = 5;
    optional float filter_ratio             = 6;
    optional BackupTable backup_table       = 7;
    optional int32 pk_prefix_balance        = 8;
    optional bool in_fast_import            = 9;  // 快速导入中，不调度，不分裂
    optional string sign_blacklist          = 10;
    optional string sign_forcelearner       = 11;
    optional string sign_forceindex         = 12;
    optional int32 tail_split_num           = 13; // 尾分裂新region数
    optional int32 tail_split_step          = 14;
    optional int64 auto_inc_rand_max        = 15; //meta挂掉后降级到随机id
    optional int32 binlog_backup_days       = 16; //binlog备份天数
};

enum Engine {
    ROCKSDB = 1;
    REDIS = 2;
    ROCKSDB_CSTORE = 3;
    BINLOG = 4;
    INFORMATION_SCHEMA = 5;
};

message SlotDescriptor {
    required int32 slot_id = 1;  //从1开始
    required PrimitiveType slot_type = 2;
    required int32 tuple_id = 3;
    optional int64 table_id = 4; //从表中获取才填
    optional int32 field_id = 5; //从表中获取才填
    optional int32 ref_cnt  = 6; //引用这个slot的数量，用来给FULLTEXT做索引覆盖查询

};

//tuple可以与table对应，也可以是中间表达式和聚合结果
message TupleDescriptor {
    required int32 tuple_id = 1; //从0开始
    optional int64 table_id = 2; //与表映射才填
    repeated SlotDescriptor slots = 3; 
};
message ExprValue {
    required PrimitiveType type       = 1;
    optional bool          bool_val   = 2;
    optional int32         int32_val  = 3;
    optional uint32        uint32_val = 4;
    optional int64         int64_val  = 5;
    optional uint64        uint64_val = 6;
    optional float         float_val  = 7;
    optional double        double_val = 8;
    optional bytes         string_val = 9;
};