// Copyright 2023 The Elastic AI Search Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax="proto2";
package EA.proto;
option cc_generic_services = true;
import "eaproto/common/error_code.proto";
import "eaproto/common/optype.proto";
import "eaproto/common/version.proto";
import "eaproto/meta/common.proto";
import "eaproto/raft/raft.proto";
import "eaproto/meta/statistics.proto";
import "eaproto/meta/expr.proto";
import "eaproto/meta/schema.struct.proto";
import "eaproto/meta/user.struct.proto";
import "eaproto/meta/cluster.struct.proto";
import "eaproto/meta/unique_id.proto";
import "eaproto/meta/config.struct.proto";
import "eaproto/meta/servlet.struct.proto";

message MetaManagerRequest {
  required OpType              op_type                = 1; //一级操作符
  optional SchemaInfo          table_info             = 2; //建/删表
  optional NameSpaceInfo       namespace_info         = 3; //建/改/删 namepace, 对应操作OP_CREATE
  optional DataBaseInfo        database_info          = 4; //建/改/删 database, 对应操作OP_CREATE
  optional UserPrivilege       user_privilege         = 5; //创建用户, 权限增删
  optional AlterTableRequest   alter_table            = 6; // 加字段/索引 删字段/索引 改字段/索引名称 改类型
  optional LogicalRoom         logical_rooms          = 7; //新增/删除逻辑机房
  optional PhysicalRoom        physical_rooms         = 8; //新增/删除物理机房
  optional InstanceInfo        instance               = 9; //新增/删除实例
  optional MovePhysicalRequest move_physical_request  = 10; //逻辑将转移
  optional RegionInfo          region_info            = 11; //add and update
  repeated int64               drop_region_ids        = 12; //支持批量删除
  optional RegionSplitRequest  region_split           = 13; //region分裂请求
  optional AutoIncrementRequest auto_increment        = 14; //自增主键id生成和更新
  optional RestoreRegionRequest restore_region        = 15; //恢复误删的region
  repeated string               resource_tags         = 16; //针对resource_tag做某些操作
  optional RegionMergeRequest  region_merge           = 17; //region merge请求
  optional bool                 need_merge            = 18;
  repeated RegionInfo          region_infos           = 19; //add and update
  optional DdlWorkInfo         ddlwork_info           = 20; //更新ddl work
  optional bool                add_delete_region      = 21; //添加被删除的region
  optional Statistics          statistics             = 22;
  optional SchemaInfo          binlog_info            = 23;  //关联binlog表及普通表
  repeated InstanceParam       instance_params        = 24;
  optional RecoverOpt          recover_opt            = 25;
  optional IndexDdlRequest     index_ddl_request      = 26;
  optional int64               learner_replica_num    = 27;
  optional bool                is_dynamic_change      = 28; // 标识是否为动态分区变更
  optional ConfigInfo          config_info            = 29;
  optional ZoneInfo            zone_info              = 30;
  optional ServletInfo         servlet_info           = 31;

};

message CreateTableResponse {
  optional SchemaInfo schema_info = 1;
  repeated RegionInfo region_infos = 2;
};

message MetaManagerResponse {
  required ErrCode errcode                            = 1;
  optional string errmsg                              = 2;
  optional string leader                              = 3;
  optional RegionSplitResponse split_response         = 4;
  optional OpType op_type                             = 5;
  optional uint64 start_id                            = 6;
  optional uint64 end_id                              = 7;
  optional RegionMergeResponse merge_response         = 8;
  optional RegionRecoverResponse recover_response     = 9;
  optional CreateTableResponse create_table_response  = 10; // 新增
};

message RegionRecoverResponse {
  repeated PeerStateInfo    set_peer_regions  = 1;
  repeated PeerStateInfo    inited_regions    = 2;
  repeated PeerStateInfo    illegal_regions   = 3;
};

message SchemaHeartBeat {
  required int64 table_id    = 1;
  required int64 version     = 2;
};

message LeaderHeartBeat {
  required RegionInfo     region       = 1;
  optional RegionStatus   status       = 2;
  repeated PeerStateInfo  peers_status = 3;
};

message LearnerHeartBeat {
  required RegionInfo     region       = 1;
  optional RegionStatus   status       = 2;
  optional PeerStatus     state = 3;
};

message PeerHeartBeat {
  required int64 region_id     = 1;
  //为了在创建表失败的情况下，该region能够删除
  required int64 table_id      = 2;
  required int64 log_index     = 3;
  optional bytes start_key     = 4;
  optional bytes end_key       = 5;
  //如果是全局二级索引的region保存主表的table_id
  optional int64 main_table_id = 6;
  optional bool  exist_leader  = 7;
  optional bool  is_learner    = 8;
  optional int64 partition_id  = 9;
};

message AddPeer {
  required int64 region_id    = 1;
  repeated string old_peers   = 2;
  repeated string new_peers   = 3;
  optional bool is_split = 4;
};

message TransLeaderRequest {
  required int64 region_id    = 1;
  required string old_leader  = 2;
  required string new_leader  = 3;
  optional int64  table_id    = 4;
};

message StoreHeartBeatRequest {
  required InstanceInfo instance_info         = 1;
  repeated SchemaHeartBeat schema_infos       = 2;
  repeated LeaderHeartBeat leader_regions     = 3;
  repeated PeerHeartBeat peer_infos           = 4;
  optional bool need_leader_balance           = 5;
  optional bool need_peer_balance             = 6;
  repeated DdlWorkInfoHeartBeat ddlwork_infos = 7;
  repeated LearnerHeartBeat learner_regions   = 8;
  repeated BinlogPeerState binlog_ts_infos    = 9;
};

message StoreHeartBeatResponse {
  required ErrCode errcode                    = 1;
  optional string errmsg                      = 2;
  repeated SchemaInfo schema_change_info      = 3;
  repeated int64 delete_region_ids            = 4;
  repeated AddPeer add_peers                  = 5;
  optional string leader                      = 6;
  repeated TransLeaderRequest trans_leader    = 7;
  repeated int64 trans_leader_table_id        = 8;
  repeated int64 trans_leader_count           = 9;
  repeated DdlWorkInfo ddlwork_infos          = 10;
  repeated InstanceParam  instance_params     = 11;
};

message RegionHeartBeat {
  required int64  region_id            = 1;
  required int64  version              = 2;
  required int64  conf_version         = 3;
  optional string leader               = 4;
  optional bool   need_update          = 5;
  optional int64  num_table_lines      = 6;
  optional int64  used_size            = 7;
};

message BaikalHeartBeatTable {
  required string namespace_name = 1;
  required string database       = 2;
  required string table_name     = 3;
};

message BaikalSchemaHeartBeat {
  required int64 table_id             = 1;
  required int64 version              = 2;
  repeated RegionHeartBeat regions    = 3;
};

message BaikalHeartBeatRequest {
  //物理机房和逻辑机房对应关系
  repeated BaikalSchemaHeartBeat schema_infos    = 1;
  optional int64        last_updated_index       = 2;
  // optional bool         not_need_statistics      = 3; // meta能识别到时，说明baikaldb已经升级，不再通过该心跳更新统计信息
  repeated RegionDdlWork region_ddl_works        = 4;
  repeated DdlWorkInfo  ddl_works                = 5;
  optional bool can_do_ddlwork                   = 6;
  optional string physical_room                  = 7;
  repeated VirtualIndexInfluence info_affect     = 8;  // 影响面信息
  optional bool need_heartbeat_table             = 9;  // 指定是否心跳按需返回
  optional bool need_binlog_heartbeat            = 10; // 指定是否binlog capturer的心跳
  repeated BaikalHeartBeatTable heartbeat_tables = 11; // 指定需要进行同步的表全名
};

message BaikalOtherHeartBeat {
  required int64 table_id             = 1;
  optional int64 statis_version       = 2;
};

message BaikalOtherHeartBeatRequest {
  repeated BaikalOtherHeartBeat schema_infos    = 1;
  optional string baikaldb_resource_tag         = 2;
};

message BaikalOtherHeartBeatResponse {
  required ErrCode errcode                      = 1;
  optional string errmsg                        = 2;
  optional string leader                        = 3;
  repeated Statistics   statistics              = 4;
  optional InstanceParam instance_param         = 5; // baikaldb动态参数
};

message BaikalHeartBeatResponse {
  required ErrCode errcode                      = 1;
  optional string errmsg                        = 2;
  optional string leader                        = 3;
  repeated SchemaInfo schema_change_info        = 4;
  repeated RegionInfo region_change_info        = 5;
  repeated UserPrivilege privilege_change_info  = 6; //全部同步
  optional IdcInfo    idc_info                  = 7;
  repeated DataBaseInfo db_info                 = 8; //全部同步
  optional int64        last_updated_index      = 9;
  repeated Statistics   statistics              = 10;
  repeated RegionDdlWork region_ddl_works       = 11;
  repeated DdlWorkInfo  ddl_works               = 12;
};

message QueryRequest {
  required QueryOpType   op_type                       = 1;
  optional string        logical_room                  = 2;
  optional string        physical_room                 = 3;
  optional string        instance_address              = 4;
  optional string        user_name                     = 5;
  optional string        namespace_name                = 6;
  optional string        database                      = 7;
  optional string        table_name                    = 8;
  repeated int64         region_ids                    = 9;
  optional string        old_leader                    = 10;
  optional string        new_leader                    = 11;
  optional string        old_peers                     = 12;
  optional string        new_peers                     = 13;
  optional string        resource_tag                  = 14;
  optional string        str_region_id                 = 15;
  optional int64         table_id                      = 16;
  optional string        config_name                   = 17;
  optional Version       config_version                = 18;
  optional string        zone                          = 19;
  optional string        servlet                       = 20;
};

message QueryResponse {
  required ErrCode            errcode             = 1;
  optional string             errmsg              = 2;
  optional string             leader              = 3;
  repeated PhysicalRoom       physical_rooms      = 4;
  repeated PhysicalInstance   physical_instances  = 5;
  repeated InstanceInfo       instance_infos      = 6;
  repeated UserPrivilege      user_privilege      = 7;
  repeated NameSpaceInfo      namespace_infos     = 8;
  repeated DataBaseInfo       database_infos      = 9;
  repeated SchemaInfo         schema_infos        = 10;
  repeated RegionInfo         region_infos        = 11;
  repeated QueryInstance      flatten_instances   = 12;
  repeated QueryUserPrivilege flatten_privileges  = 13;
  repeated QueryRegion        flatten_regions     = 14;
  repeated QueryTable         flatten_tables      = 15;
  repeated QuerySchema        flatten_schema_infos= 16;
  repeated int64              peer_ids            = 17;
  repeated int64              region_ids          = 18;
  repeated DdlWorkInfo        ddlwork_infos       = 19;
  repeated QueryDdlInfo       query_ddl_infos     = 20;
  repeated RegionStateInfo    region_status_infos = 21;
  repeated InstanceParam      instance_params     = 22;
  repeated RegionDdlWork      region_ddl_infos    = 23;
  repeated ResourceTagInfo    resource_tag_infos  = 24;
  repeated VirtualInfoAndSqls virtual_index_influence_info  = 25;
  repeated BinlogRegionInfo   binlog_region_state           = 26;
  repeated ZoneInfo           zone_infos                    = 27;
  repeated ServletInfo        servlet_infos                 = 28;
  repeated ConfigInfo         config_infos                  = 29;
  repeated QueryUserServletPrivilege flatten_servlet_privileges = 30;
};


message DdlPeerInfo {
  optional string peer                     = 1;
  optional IndexState state                = 2;
};
message DdlRegionInfo {
  optional int64 region_id                = 1;
  optional IndexState state               = 2;
  repeated DdlPeerInfo ddl_peer_infos     = 3;
};
message QueryDdlInfo {
  optional int64 table_id                 = 1;
  repeated DdlRegionInfo ddl_region_infos = 2;
};

message QueryUserPrivilege {
  required string         username        = 1;
  required string         namespace_name  = 2;
  required string         privilege       = 3;
  required RW             table_rw        = 4;
  optional string         password        = 5;
};

message QueryUserServletPrivilege {
  required string         username        = 1;
  required string         namespace_name  = 2;
  required string         privilege       = 3;
  required RW             servlet_rw      = 4;
  optional string         password        = 5;
};

message QueryInstance {
  required string        address                      = 1;
  optional int64         capacity                     = 2;
  optional int64         used_size                    = 3;
  optional string        resource_tag                 = 4;
  optional Status        status                       = 5;
  optional string        physical_room                = 6;
  optional string        logical_room                 = 7;
  optional int64         peer_count                   = 8;
  optional string        peer_ids                     = 9;
  optional int64         region_leader_count          = 10;
  optional string        region_leader_ids            = 11;
  optional int64         region_count                 = 12;
  optional string        region_ids                   = 13;
  optional string        version                      = 14;
};

message QueryRegion {
  required int64 region_id               = 1;
  optional string table_name             = 2;//层次表只保存最上层table_id
  optional int64 partition_id            = 3;
  optional int64 replica_num             = 4;
  optional int64 version                 = 5;
  optional int64 conf_version            = 6;//用于baikal和meta_server之间同步peer和leader信息
  optional bytes start_key              = 7;
  optional bytes end_key                = 8;
  optional string peers                  = 9;//包含leader
  optional string leader                 = 10;
  optional RegionStatus status           = 11;
  optional int64  used_size              = 12;
  optional int64 log_index               = 13;
  optional bool deleted                  = 14;
  optional bool can_add_peer             = 15; //刚分裂出来的region如果没有做过truncate_log_index, 不能增加region
  optional string primary_key            = 16;
  optional string resource_tag           = 17;
  optional int64 parent                  = 18;
  optional string create_time            = 19;
  optional int64  table_id               = 20;
  optional int64 num_table_lines         = 21;
  optional string raw_start_key          = 22;
  optional int64  main_table_id          = 23;
};

message QueryTable {
  required string             namespace_name      = 1;
  required string             database            = 2;
  required string             table_name          = 3;
  required string             upper_table_name    = 4;
  required int64              region_size         = 5;
  required int64              replica_num         = 6;
  required string             resource_tag        = 7;
  required int64              max_field_id        = 8;
  required int64              version             = 10;
  required Status             status              = 11;
  optional string             split_keys          = 12;
  required bool               deleted             = 13;
  required int64              byte_size_per_record= 14;
  optional int64              table_id            = 15;
  optional string             create_time         = 16;
  optional int64              region_count        = 17;
  optional int64              row_count           = 18;
  optional int64              main_table_id       = 19;
  optional int64              region_split_lines  = 20;
  optional int64              partition_num       = 21;
  optional int64              fast_importer_ts    = 22;
  optional string             binlog              = 23;
};

message QuerySchema {
  required string             field_or_index      = 1;
  required string             column_name         = 2;
  required int64              column_id           = 3;
  required string             column_type         = 4;
  optional bool               can_null            = 5;
  optional string             extra               = 6;
  optional bool               deleted             = 7;
  optional string             default_value       = 8;
  optional string             comment             = 9;
};

message TableHeartBeat {
  optional int64 table_id       = 1;
  optional int64 version        = 2;
  optional bool  need_update    = 3;
};

message ConsoleHeartBeatRequest {
  repeated TableHeartBeat table_versions     = 1;
  repeated RegionHeartBeat region_versions   = 2;
};

message ConsoleHeartBeatResponse {
  required ErrCode errcode                         = 1;
  optional string errmsg                           = 2;
  optional string leader                           = 3;
  repeated QueryInstance      flatten_instances    = 4;
  repeated QueryUserPrivilege flatten_privileges   = 5;
  repeated RegionChangeInfo   region_change_infos  = 6;
  repeated TableInfo          table_change_infos   = 7;
};
