// Copyright 2023 The Turbo Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright 2023 The Turbo Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
syntax = "proto2";
import "eaproto/raft/raft.proto";
import "eaproto/db/meta.struct.proto";
import "eaproto/ops/ops.struct.proto";

package EA.proto;
option cc_generic_services = true;

service RouterService {

  rpc meta_manager(MetaManagerRequest) returns (MetaManagerResponse);

  rpc meta_query(QueryRequest) returns (QueryResponse);

  rpc config_manage(OpsServiceRequest) returns (OpsServiceResponse);
  
  rpc config_query(QueryOpsServiceRequest) returns (QueryOpsServiceResponse);

  rpc plugin_manage(OpsServiceRequest) returns (OpsServiceResponse);
  
  rpc plugin_query(QueryOpsServiceRequest) returns (QueryOpsServiceResponse);

  rpc dict_manage(OpsServiceRequest) returns (OpsServiceResponse);
  
  rpc dict_query(QueryOpsServiceRequest) returns (QueryOpsServiceResponse);

  rpc dicovery_manage(OpsServiceRequest) returns (OpsServiceResponse);
  
  rpc discovery_query(QueryOpsServiceRequest) returns (QueryOpsServiceResponse);

};